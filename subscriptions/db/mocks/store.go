// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ShadrackAdwera/go-subscriptions/subscriptions/db/sqlc (interfaces: TxSubscriptionsStore)

// Package mocksdb is a generated GoMock package.
package mocksdb

import (
	context "context"
	reflect "reflect"

	db "github.com/ShadrackAdwera/go-subscriptions/subscriptions/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockTxSubscriptionsStore is a mock of TxSubscriptionsStore interface.
type MockTxSubscriptionsStore struct {
	ctrl     *gomock.Controller
	recorder *MockTxSubscriptionsStoreMockRecorder
}

// MockTxSubscriptionsStoreMockRecorder is the mock recorder for MockTxSubscriptionsStore.
type MockTxSubscriptionsStoreMockRecorder struct {
	mock *MockTxSubscriptionsStore
}

// NewMockTxSubscriptionsStore creates a new mock instance.
func NewMockTxSubscriptionsStore(ctrl *gomock.Controller) *MockTxSubscriptionsStore {
	mock := &MockTxSubscriptionsStore{ctrl: ctrl}
	mock.recorder = &MockTxSubscriptionsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxSubscriptionsStore) EXPECT() *MockTxSubscriptionsStoreMockRecorder {
	return m.recorder
}

// CreatePackage mocks base method.
func (m *MockTxSubscriptionsStore) CreatePackage(arg0 context.Context, arg1 db.CreatePackageParams) (db.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackage", arg0, arg1)
	ret0, _ := ret[0].(db.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePackage indicates an expected call of CreatePackage.
func (mr *MockTxSubscriptionsStoreMockRecorder) CreatePackage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackage", reflect.TypeOf((*MockTxSubscriptionsStore)(nil).CreatePackage), arg0, arg1)
}

// CreateSubscriptionUser mocks base method.
func (m *MockTxSubscriptionsStore) CreateSubscriptionUser(arg0 context.Context, arg1 db.CreateSubscriptionUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionUser indicates an expected call of CreateSubscriptionUser.
func (mr *MockTxSubscriptionsStoreMockRecorder) CreateSubscriptionUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionUser", reflect.TypeOf((*MockTxSubscriptionsStore)(nil).CreateSubscriptionUser), arg0, arg1)
}

// CreateUserPackage mocks base method.
func (m *MockTxSubscriptionsStore) CreateUserPackage(arg0 context.Context, arg1 db.CreateUserPackageParams) (db.UsersPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPackage", arg0, arg1)
	ret0, _ := ret[0].(db.UsersPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserPackage indicates an expected call of CreateUserPackage.
func (mr *MockTxSubscriptionsStoreMockRecorder) CreateUserPackage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPackage", reflect.TypeOf((*MockTxSubscriptionsStore)(nil).CreateUserPackage), arg0, arg1)
}

// DeletePackage mocks base method.
func (m *MockTxSubscriptionsStore) DeletePackage(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePackage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePackage indicates an expected call of DeletePackage.
func (mr *MockTxSubscriptionsStoreMockRecorder) DeletePackage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackage", reflect.TypeOf((*MockTxSubscriptionsStore)(nil).DeletePackage), arg0, arg1)
}

// DeleteSubscriptionUser mocks base method.
func (m *MockTxSubscriptionsStore) DeleteSubscriptionUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriptionUser indicates an expected call of DeleteSubscriptionUser.
func (mr *MockTxSubscriptionsStoreMockRecorder) DeleteSubscriptionUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionUser", reflect.TypeOf((*MockTxSubscriptionsStore)(nil).DeleteSubscriptionUser), arg0, arg1)
}

// DeleteUserPackage mocks base method.
func (m *MockTxSubscriptionsStore) DeleteUserPackage(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPackage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPackage indicates an expected call of DeleteUserPackage.
func (mr *MockTxSubscriptionsStoreMockRecorder) DeleteUserPackage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPackage", reflect.TypeOf((*MockTxSubscriptionsStore)(nil).DeleteUserPackage), arg0, arg1)
}

// GetPackages mocks base method.
func (m *MockTxSubscriptionsStore) GetPackages(arg0 context.Context) ([]db.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackages", arg0)
	ret0, _ := ret[0].([]db.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackages indicates an expected call of GetPackages.
func (mr *MockTxSubscriptionsStoreMockRecorder) GetPackages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackages", reflect.TypeOf((*MockTxSubscriptionsStore)(nil).GetPackages), arg0)
}

// GetSubscriptionUsers mocks base method.
func (m *MockTxSubscriptionsStore) GetSubscriptionUsers(arg0 context.Context) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionUsers", arg0)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionUsers indicates an expected call of GetSubscriptionUsers.
func (mr *MockTxSubscriptionsStoreMockRecorder) GetSubscriptionUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionUsers", reflect.TypeOf((*MockTxSubscriptionsStore)(nil).GetSubscriptionUsers), arg0)
}

// GetUserPackages mocks base method.
func (m *MockTxSubscriptionsStore) GetUserPackages(arg0 context.Context) ([]db.GetUserPackagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPackages", arg0)
	ret0, _ := ret[0].([]db.GetUserPackagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPackages indicates an expected call of GetUserPackages.
func (mr *MockTxSubscriptionsStoreMockRecorder) GetUserPackages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPackages", reflect.TypeOf((*MockTxSubscriptionsStore)(nil).GetUserPackages), arg0)
}

// UpdatePackage mocks base method.
func (m *MockTxSubscriptionsStore) UpdatePackage(arg0 context.Context, arg1 db.UpdatePackageParams) (db.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePackage", arg0, arg1)
	ret0, _ := ret[0].(db.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePackage indicates an expected call of UpdatePackage.
func (mr *MockTxSubscriptionsStoreMockRecorder) UpdatePackage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackage", reflect.TypeOf((*MockTxSubscriptionsStore)(nil).UpdatePackage), arg0, arg1)
}

// UpdateSubscriptionUser mocks base method.
func (m *MockTxSubscriptionsStore) UpdateSubscriptionUser(arg0 context.Context, arg1 db.UpdateSubscriptionUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionUser indicates an expected call of UpdateSubscriptionUser.
func (mr *MockTxSubscriptionsStoreMockRecorder) UpdateSubscriptionUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionUser", reflect.TypeOf((*MockTxSubscriptionsStore)(nil).UpdateSubscriptionUser), arg0, arg1)
}

// UpdateUserPackage mocks base method.
func (m *MockTxSubscriptionsStore) UpdateUserPackage(arg0 context.Context, arg1 db.UpdateUserPackageParams) (db.UsersPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPackage", arg0, arg1)
	ret0, _ := ret[0].(db.UsersPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPackage indicates an expected call of UpdateUserPackage.
func (mr *MockTxSubscriptionsStoreMockRecorder) UpdateUserPackage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPackage", reflect.TypeOf((*MockTxSubscriptionsStore)(nil).UpdateUserPackage), arg0, arg1)
}
