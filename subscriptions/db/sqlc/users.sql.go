// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createSubscriptionUser = `-- name: CreateSubscriptionUser :one
INSERT INTO users (
  id, username, email, stripe_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, username, email, stripe_id, created_at
`

type CreateSubscriptionUserParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
	StripeID string `json:"stripe_id"`
}

func (q *Queries) CreateSubscriptionUser(ctx context.Context, arg CreateSubscriptionUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createSubscriptionUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.StripeID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.StripeID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSubscriptionUser = `-- name: DeleteSubscriptionUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteSubscriptionUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriptionUser, id)
	return err
}

const getSubscriptionUserByStripeId = `-- name: GetSubscriptionUserByStripeId :one
SELECT id, username, email, stripe_id, created_at 
FROM users 
WHERE stripe_id = $1 
LIMIT 1
`

func (q *Queries) GetSubscriptionUserByStripeId(ctx context.Context, stripeID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionUserByStripeId, stripeID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.StripeID,
		&i.CreatedAt,
	)
	return i, err
}

const getSubscriptionUsers = `-- name: GetSubscriptionUsers :many
SELECT id, username, email, stripe_id, created_at FROM users
`

func (q *Queries) GetSubscriptionUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getSubscriptionUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.StripeID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscriptionUser = `-- name: UpdateSubscriptionUser :one
UPDATE users 
SET
  username = COALESCE($1,username),
  email = COALESCE($2,email),
  stripe_id = COALESCE($3,stripe_id)
WHERE id = $4
RETURNING id, username, email, stripe_id, created_at
`

type UpdateSubscriptionUserParams struct {
	Username sql.NullString `json:"username"`
	Email    sql.NullString `json:"email"`
	StripeID sql.NullString `json:"stripe_id"`
	ID       int64          `json:"id"`
}

func (q *Queries) UpdateSubscriptionUser(ctx context.Context, arg UpdateSubscriptionUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateSubscriptionUser,
		arg.Username,
		arg.Email,
		arg.StripeID,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.StripeID,
		&i.CreatedAt,
	)
	return i, err
}
